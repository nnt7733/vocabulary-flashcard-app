import React, { useCallback, useMemo, useState } from 'react';
import { Flashcard } from '../types';
import EditForm from './EditForm';
import { FixedSizeList as List, ListChildComponentProps } from 'react-window';
import { calculateCardUrgency, sortCardsByUrgency } from '../utils/overdue';

interface FlashcardListProps {
  flashcards: Flashcard[];
  onUpdateCard: (updatedCard: Flashcard) => void;
  onDeleteCard: (cardId: string) => void;
  onDeleteAll: () => void;
}

const ITEM_HEIGHT = 180;
const LIST_HEIGHT = 500;

const LEVEL_COLORS = [
  '#ef4444',
  '#f97316',
  '#eab308',
  '#22c55e',
  '#3b82f6',
  '#8b5cf6'
];

const LEVEL_TEXTS = [
  'M·ªõi h·ªçc',
  '1 ng√†y',
  '3 ng√†y',
  '7 ng√†y',
  '14 ng√†y',
  '28 ng√†y'
];

const getLevelColor = (level: number) => LEVEL_COLORS[level] || '#6b7280';
const getLevelText = (level: number) => LEVEL_TEXTS[level] || 'Kh√¥ng x√°c ƒë·ªãnh';

type ListData = {
  cards: Flashcard[];
  onEdit: (card: Flashcard) => void;
  onDelete: (cardId: string) => void;
  onRestore: (card: Flashcard) => void;
  getLevelColor: (level: number) => string;
  getLevelText: (level: number) => string;
  getUrgency: (card: Flashcard) => ReturnType<typeof calculateCardUrgency>;
};

const FlashcardRow: React.FC<ListChildComponentProps<ListData>> = ({ index, style, data }) => {
  const card = data.cards[index];

  if (!card) {
    return null;
  }

  const isLearned = card.status === 'learned';
  const urgency = data.getUrgency(card);

  const renderUrgencyBadge = () => {
    if (isLearned) {
      return null;
    }

    if (urgency.isLongOverdue) {
      return (
        <span
          style={{
            display: 'inline-flex',
            alignItems: 'center',
            gap: '4px',
            background: '#fee2e2',
            color: '#b91c1c',
            padding: '4px 8px',
            borderRadius: '999px',
            fontSize: '12px',
            fontWeight: 600
          }}
        >
          üö® Qu√° h·∫°n {urgency.overdueDays} ng√†y
        </span>
      );
    }

    if (urgency.isOverdue) {
      return (
        <span
          style={{
            display: 'inline-flex',
            alignItems: 'center',
            gap: '4px',
            background: '#fef3c7',
            color: '#b45309',
            padding: '4px 8px',
            borderRadius: '999px',
            fontSize: '12px',
            fontWeight: 600
          }}
        >
          ‚ö†Ô∏è Tr·ªÖ {urgency.overdueDays} ng√†y
        </span>
      );
    }

    if (urgency.isDueSoon) {
      return (
        <span
          style={{
            display: 'inline-flex',
            alignItems: 'center',
            gap: '4px',
            background: '#e0f2fe',
            color: '#0369a1',
            padding: '4px 8px',
            borderRadius: '999px',
            fontSize: '12px',
            fontWeight: 600
          }}
        >
          ‚è∞ C√≤n {urgency.daysUntilDue} ng√†y ƒë·ªÉ √¥n
        </span>
      );
    }

    return null;
  };

  return (
    <div
      style={{
        ...style,
        padding: '8px 0'
      }}
    >
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '16px',
          border: '1px solid #e5e7eb',
          borderRadius: '8px',
          background: 'white',
          boxShadow: '0 1px 2px rgba(15, 23, 42, 0.04)'
        }}
      >
        <div style={{ flex: 1 }}>
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '12px',
              marginBottom: '8px'
            }}
          >
            <span
              style={{
                background: isLearned ? '#10b981' : data.getLevelColor(card.currentLevel),
                color: 'white',
                padding: '4px 8px',
                borderRadius: '4px',
                fontSize: '12px',
                fontWeight: 600
              }}
            >
              {isLearned ? 'ƒê√£ ho√†n th√†nh' : `C·∫•p ${card.currentLevel}`}
            </span>
            <span
              style={{
                color: '#6b7280',
                fontSize: '14px'
              }}
            >
              {isLearned ? 'Kh√¥ng c·∫ßn √¥n th√™m' : `√în l·∫°i sau: ${data.getLevelText(card.currentLevel)}`}
            </span>
            {renderUrgencyBadge()}
          </div>
          <div style={{ fontWeight: 600, color: '#1f2937', marginBottom: '4px' }}>
            {card.term}
          </div>
          <div style={{ color: '#6b7280', fontSize: '14px' }}>
            {card.definition}
          </div>
          <div
            style={{
              color: '#9ca3af',
              fontSize: '12px',
              marginTop: '8px'
            }}
          >
            T·∫°o: {new Date(card.createdAt).toLocaleDateString('vi-VN')} ‚Ä¢ L·∫ßn √¥n: {card.repetitions.length}
          </div>
        </div>
        <div style={{ display: 'flex', gap: '8px' }}>
          {isLearned ? (
            <>
              <button
                onClick={() => data.onRestore(card)}
                className="btn btn-secondary"
                style={{ padding: '8px 12px', fontSize: '14px' }}
              >
                üîÑ Kh√¥i ph·ª•c
              </button>
              <button
                onClick={() => data.onDelete(card.id)}
                className="btn btn-danger"
                style={{ padding: '8px 12px', fontSize: '14px' }}
              >
                üóëÔ∏è X√≥a
              </button>
            </>
          ) : (
            <>
              <button
                onClick={() => data.onEdit(card)}
                className="btn btn-secondary"
                style={{ padding: '8px 12px', fontSize: '14px' }}
              >
                ‚úèÔ∏è S·ª≠a
              </button>
              <button
                onClick={() => data.onDelete(card.id)}
                className="btn btn-danger"
                style={{ padding: '8px 12px', fontSize: '14px' }}
              >
                üóëÔ∏è X√≥a
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

const FlashcardList: React.FC<FlashcardListProps> = ({
  flashcards,
  onUpdateCard,
  onDeleteCard,
  onDeleteAll
}) => {
  const [editingCard, setEditingCard] = useState<Flashcard | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [activeTab, setActiveTab] = useState<'active' | 'learned'>('active');

  const handleEdit = useCallback((card: Flashcard) => {
    setEditingCard(card);
  }, []);

  const handleSaveEdit = useCallback((updatedCard: Flashcard) => {
    onUpdateCard(updatedCard);
    setEditingCard(null);
  }, [onUpdateCard]);

  const handleCancelEdit = useCallback(() => {
    setEditingCard(null);
  }, []);

  const handleDelete = useCallback((cardId: string) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·ª´ n√†y?')) {
      onDeleteCard(cardId);
    }
  }, [onDeleteCard]);

  const handleDeleteAll = useCallback(() => {
    setShowDeleteConfirm(true);
  }, []);

  const handleRestore = useCallback((card: Flashcard) => {
    onUpdateCard({
      ...card,
      status: 'active',
      currentLevel: 0,
      nextReviewDate: new Date(),
      isNew: false
    });
  }, [onUpdateCard]);

  const confirmDeleteAll = useCallback(() => {
    onDeleteAll();
    setShowDeleteConfirm(false);
  }, [onDeleteAll]);

  const activeCards = useMemo(
    () => flashcards.filter(card => card.status !== 'learned'),
    [flashcards]
  );

  const sortedActiveCards = useMemo(
    () => sortCardsByUrgency(activeCards),
    [activeCards]
  );

  const learnedCards = useMemo(
    () => flashcards.filter(card => card.status === 'learned'),
    [flashcards]
  );

  const cardsToRender = activeTab === 'active' ? sortedActiveCards : learnedCards;

  const listData = useMemo<ListData>(
    () => ({
      cards: cardsToRender,
      onEdit: handleEdit,
      onDelete: handleDelete,
      onRestore: handleRestore,
      getLevelColor,
      getLevelText,
      getUrgency: calculateCardUrgency
    }),
    [cardsToRender, handleEdit, handleDelete, handleRestore]
  );

  if (editingCard) {
    return (
      <EditForm
        card={editingCard}
        onSave={handleSaveEdit}
        onCancel={handleCancelEdit}
      />
    );
  }

  if (showDeleteConfirm) {
    return (
      <div className="card">
        <div style={{ textAlign: 'center', padding: '24px' }}>
          <h3 style={{ color: '#dc2626', marginBottom: '16px' }}>
            ‚ö†Ô∏è X√≥a to√†n b·ªô t·ª´ v·ª±ng
          </h3>
          <p style={{ color: '#6b7280', marginBottom: '24px' }}>
            B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a <strong>{flashcards.length} t·ª´ v·ª±ng</strong>?<br/>
            H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
          </p>
          <div style={{ display: 'flex', justifyContent: 'center', gap: '12px' }}>
            <button
              onClick={() => setShowDeleteConfirm(false)}
              className="btn btn-secondary"
            >
              H·ªßy
            </button>
            <button
              onClick={confirmDeleteAll}
              className="btn btn-danger"
            >
              X√≥a to√†n b·ªô
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="card">
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
        <h2 style={{ margin: 0, color: '#1f2937' }}>
          Qu·∫£n l√Ω t·ª´ v·ª±ng ({activeCards.length} ƒëang h·ªçc ‚Ä¢ {learnedCards.length} ƒë√£ ho√†n th√†nh)
        </h2>
        <button
          onClick={handleDeleteAll}
          className="btn btn-danger"
          disabled={flashcards.length === 0}
        >
          üóëÔ∏è X√≥a to√†n b·ªô
        </button>
      </div>

      {flashcards.length === 0 ? (
        <div className="empty-state">
          <h3>Ch∆∞a c√≥ t·ª´ v·ª±ng n√†o</h3>
          <p>H√£y th√™m m·ªôt s·ªë t·ª´ v·ª±ng m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc t·∫≠p!</p>
        </div>
      ) : (
        <>
          <div style={{ display: 'flex', gap: '12px', marginBottom: '16px' }}>
            <button
              onClick={() => setActiveTab('active')}
              className={`btn ${activeTab === 'active' ? 'btn-primary' : 'btn-secondary'}`}
            >
              ƒêang h·ªçc ({activeCards.length})
            </button>
            <button
              onClick={() => setActiveTab('learned')}
              className={`btn ${activeTab === 'learned' ? 'btn-primary' : 'btn-secondary'}`}
            >
              ƒê√£ ho√†n th√†nh ({learnedCards.length})
            </button>
          </div>

          {cardsToRender.length === 0 ? (
            <div className="empty-state">
              <h3>
                {activeTab === 'active'
                  ? 'T·∫•t c·∫£ th·∫ª ƒëang ho·∫°t ƒë·ªông ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang m·ª•c ho√†n th√†nh'
                  : 'Ch∆∞a c√≥ th·∫ª n√†o ho√†n th√†nh'}
              </h3>
              <p>
                {activeTab === 'active'
                  ? 'H√£y th√™m th·∫ª m·ªõi ho·∫∑c kh√¥i ph·ª•c t·ª´ m·ª•c ho√†n th√†nh ƒë·ªÉ ti·∫øp t·ª•c h·ªçc.'
                  : '√în t·∫≠p c√°c th·∫ª th∆∞·ªùng xuy√™n ƒë·ªÉ chuy·ªÉn sang tr·∫°ng th√°i ho√†n th√†nh!'}
              </p>
            </div>
          ) : (
            <List
              height={LIST_HEIGHT}
              itemCount={cardsToRender.length}
              itemSize={ITEM_HEIGHT}
              itemData={listData}
              overscanCount={4}
            >
              {FlashcardRow}
            </List>
          )}
        </>
      )}
    </div>
  );
};

export default FlashcardList;
